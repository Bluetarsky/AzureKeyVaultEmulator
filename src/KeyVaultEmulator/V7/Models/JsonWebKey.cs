// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AzureKeyVaultEmulator.V7.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
    /// </summary>
    public partial class JsonWebKey
    {
        /// <summary>
        /// Initializes a new instance of the JsonWebKey class.
        /// </summary>
        public JsonWebKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonWebKey class.
        /// </summary>
        /// <param name="kid">Key identifier.</param>
        /// <param name="kty">JsonWebKey Key Type (kty), as defined in
        /// https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
        /// Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM',
        /// 'oct'</param>
        /// <param name="n">RSA modulus.</param>
        /// <param name="e">RSA public exponent.</param>
        /// <param name="d">RSA private exponent, or the D component of an EC
        /// private key.</param>
        /// <param name="dp">RSA private key parameter.</param>
        /// <param name="dq">RSA private key parameter.</param>
        /// <param name="qi">RSA private key parameter.</param>
        /// <param name="p">RSA secret prime.</param>
        /// <param name="q">RSA secret prime, with p &lt; q.</param>
        /// <param name="k">Symmetric key.</param>
        /// <param name="t">HSM Token, used with 'Bring Your Own Key'.</param>
        /// <param name="crv">Elliptic curve name. For valid values, see
        /// JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384',
        /// 'P-521', 'P-256K'</param>
        /// <param name="x">X component of an EC public key.</param>
        /// <param name="y">Y component of an EC public key.</param>
        public JsonWebKey(string kid = default(string), string kty = default(string), IList<string> keyOps = default(IList<string>), byte[] n = default(byte[]), byte[] e = default(byte[]), byte[] d = default(byte[]), byte[] dp = default(byte[]), byte[] dq = default(byte[]), byte[] qi = default(byte[]), byte[] p = default(byte[]), byte[] q = default(byte[]), byte[] k = default(byte[]), byte[] t = default(byte[]), string crv = default(string), byte[] x = default(byte[]), byte[] y = default(byte[]))
        {
            Kid = kid;
            Kty = kty;
            KeyOps = keyOps;
            N = n;
            E = e;
            D = d;
            DP = dp;
            DQ = dq;
            QI = qi;
            P = p;
            Q = q;
            K = k;
            T = t;
            Crv = crv;
            X = x;
            Y = y;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key identifier.
        /// </summary>
        [JsonProperty(PropertyName = "kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or sets jsonWebKey Key Type (kty), as defined in
        /// https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
        /// Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
        /// </summary>
        [JsonProperty(PropertyName = "kty")]
        public string Kty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "key_ops")]
        public IList<string> KeyOps { get; set; }

        /// <summary>
        /// Gets or sets RSA modulus.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "n")]
        public byte[] N { get; set; }

        /// <summary>
        /// Gets or sets RSA public exponent.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "e")]
        public byte[] E { get; set; }

        /// <summary>
        /// Gets or sets RSA private exponent, or the D component of an EC
        /// private key.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "d")]
        public byte[] D { get; set; }

        /// <summary>
        /// Gets or sets RSA private key parameter.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "dp")]
        public byte[] DP { get; set; }

        /// <summary>
        /// Gets or sets RSA private key parameter.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "dq")]
        public byte[] DQ { get; set; }

        /// <summary>
        /// Gets or sets RSA private key parameter.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "qi")]
        public byte[] QI { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "p")]
        public byte[] P { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime, with p &amp;lt; q.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "q")]
        public byte[] Q { get; set; }

        /// <summary>
        /// Gets or sets symmetric key.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "k")]
        public byte[] K { get; set; }

        /// <summary>
        /// Gets or sets HSM Token, used with 'Bring Your Own Key'.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "key_hsm")]
        public byte[] T { get; set; }

        /// <summary>
        /// Gets or sets elliptic curve name. For valid values, see
        /// JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384',
        /// 'P-521', 'P-256K'
        /// </summary>
        [JsonProperty(PropertyName = "crv")]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or sets x component of an EC public key.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "x")]
        public byte[] X { get; set; }

        /// <summary>
        /// Gets or sets y component of an EC public key.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "y")]
        public byte[] Y { get; set; }

    }
}
